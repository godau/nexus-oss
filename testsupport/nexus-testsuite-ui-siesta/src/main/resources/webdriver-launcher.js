var isWindows=-1!=java.lang.System.getProperty("os.name").indexOf("Windows"),isMacOS=-1!=java.lang.System.getProperty("os.name").indexOf("Mac"),is64=-1!=java.lang.System.getProperty("os.arch").indexOf("64"),isDebug=!1,noColor=!1,debug=function(a){isDebug&&safePrint(a)},safePrint=function(a){noColor&&(a=String(a).replace(/\x1B\[\d+m([\s\S]*?)\x1B\[\d+m/mg,"$1"));print(a)},sleep=function(a){java.lang.Thread.currentThread().sleep(a)},convertPath=function(a){return isWindows?a.replace(/\//g,"\\"):a},
readFile=function(a){a=convertPath(a);return(new java.util.Scanner(new java.io.File(a),"UTF-8")).useDelimiter("\\A").next()},setChromeDriverServerPath=function(a){isWindows?java.lang.System.setProperty("webdriver.chrome.driver",a+"\\binary\\chromedriver_win\\chromedriver.exe"):isMacOS?java.lang.System.setProperty("webdriver.chrome.driver",a+"/binary/chromedriver_mac/chromedriver"):is64?java.lang.System.setProperty("webdriver.chrome.driver",a+"/binary/chromedriver_linux64/chromedriver"):java.lang.System.setProperty("webdriver.chrome.driver",
a+"/binary/chromedriver_linux32/chromedriver")},setIEDriverServerPath=function(a){isWindows&&(is64?java.lang.System.setProperty("webdriver.ie.driver",a+"\\binary\\iedriver_win64\\IEDriverServer.exe"):java.lang.System.setProperty("webdriver.ie.driver",a+"\\binary\\iedriver_win32\\IEDriverServer.exe"))},currentDriver;java.lang.Runtime.getRuntime().addShutdownHook(java.lang.Thread(function(){if(currentDriver)try{currentDriver.quit()}catch(a){}try{(new java.io.File("libpeerconnection.log"))["delete"]()}catch(b){}}));
var getProceduralInterface=function(a,b,f){currentDriver=a;var d,g,h=!0;return{browserName:b,debug:function(c){java.lang.System.err.println(c)},print:function(c){safePrint(c)},open:function(c,a){currentDriver||(currentDriver=getDriverInstance(b));currentDriver||print("[ERROR]: no current driver after `getDriverInstance`");currentDriver.manage().window().setSize(new Packages.org.openqa.selenium.Dimension(d,g));currentDriver.get(c);sleep(1E3);this.executeScript("window.focus()",!0);"true"!=String(this.executeScript("return typeof Siesta != 'undefined'",
!0))&&(print("[ERROR] Can't find Siesta on the harness page - page loading failed?"),currentDriver.quit(),quit(5));"true"!=String(this.executeScript("try { return typeof Siesta.Harness.Browser.Automation != 'undefined' } catch(e) { return false } "))&&(print("[ERROR] The harness page you are targeting contains Siesta Lite distribution. To use automation facilities, \nmake sure harness page uses `siesta-all.js` from Standard or Trial packages"),currentDriver.quit(),quit(5));coverageOptions.enableCodeCoverage&&
"true"!=String(this.executeScript("try { return typeof IstanbulCollector != 'undefined' } catch(e) { return false } "))&&(print("[ERROR] You've enabled code coverage, but harness page you are targeting does not contain required classes. Did you include `siesta-coverage-all.js` on the harness page?"),currentDriver.quit(),quit(5));if(h){h=!1;var e=parseBrowser(currentDriver.executeScript("return window.navigator.userAgent")),f=parseOS(currentDriver.executeScript("return window.navigator.platform"));
print("Launching test suite, OS: "+f+", browser: "+e.name+" "+e.version)}a()},close:function(){try{currentDriver.quit()}catch(c){}sleep(1E3);currentDriver=null},setWindowSize:function(c,a){d=c;g=a},executeScript:function(c,a){try{return currentDriver.executeScript(c)}catch(b){return a||(print("<Exception from launcher>"),print("    While running: "+c.substring(0,100)),print("    Exception: "+b),print("</Exception from launcher>")),null}},sleep:function(c,a){sleep(c);a()},saveReport:function(c){var a=
f.filePrefix,e=/(.*?)\.([^.]*?)$/.exec(a);this.saveFile(e?e[1]+b+"."+e[2]:a+b,c)},readFile:function(a){return readFile(a)},ensurePathExists:function(a){a=convertPath(a);(a=(new java.io.File(a)).getParentFile())&&!a.exists()&&a.mkdirs()},saveFile:function(a,b){a=convertPath(a);this.ensurePathExists(a);var e=new java.io.BufferedWriter(new java.io.FileWriter(a));e.write(String(b));e.close()},copyFile:function(a,b){var e=new java.io.File(convertPath(b)),f=new java.io.File(convertPath(a));this.ensurePathExists(b);
e.exists()||e.createNewFile();var d,g;try{d=(new java.io.FileInputStream(f)).getChannel(),g=(new java.io.FileOutputStream(e)).getChannel(),g.transferFrom(d,0,d.size())}finally{d&&d.close(),g&&g.close()}},copyTree:function(a,b){org.apache.commons.io.FileUtils.copyDirectory(new java.io.File(convertPath(a)),new java.io.File(convertPath(b)))},saveHtmlCoverageReport:function(a,b){this.copyFile(binDir+"/coverage/index.html",a+"/index.html");this.copyFile(binDir+"/coverage/siesta-coverage-report.css",a+
"/css/siesta-coverage-report.css");this.copyFile(binDir+"/coverage/siesta-coverage-report.js",a+"/siesta-coverage-report.js");this.copyFile(binDir+"/../resources/images/leaf.png",a+"/images/leaf.png");this.copyFile(binDir+"/../resources/images/ns.png",a+"/images/ns.png");this.copyTree(binDir+"/../resources/css/fonts",a+"/css/fonts");this.saveFile(a+"/coverage-data.json",JSON.stringify(b))},saveLcovCoverageReport:function(a,b){this.saveFile(a+"/lcov.info",b.lcovReport)},saveRawCoverageReport:function(a,
b){this.saveFile(a+"/raw_coverage_data.json",JSON.stringify(b))}}},args=processArguments(arguments),options=args.options,binDir=args.argv[0].replace(/\\\/?$/,"");
if(options.version){var siestaAll=(new java.util.Scanner(new java.io.File(binDir+convertPath("/../siesta-all.js")),"UTF-8")).useDelimiter("\\A").next(),jar=new java.util.jar.JarFile(new java.io.File(binDir+convertPath("/binary/selenium-server-standalone-2.37.0.jar"))),match=/^\/\*[\s\S]*?Siesta (\d.+)\n/.exec(siestaAll);print("Selenium : "+jar.getManifest().getAttributes("Build-Info").getValue("Selenium-Version"));match&&print("Siesta   : "+match[1]);quit(8)}
if(1==args.argv.length||options.help)print('Usage: webdriver url [OPTIONS]\nThe `url` should point to your `tests/index.html` file\n\nOptions (all are optional):\n--help                     - prints this help message\n--version                  - prints versions of Siesta and Selenium Webdriver\n\n--browser browsername      - should be exactly one of the "firefox / chrome / ie / safari"\n                             this option can be repeated several times\n                             default value is *, meaning all available browsers\n--include regexp           - a regexp to to only include the matching urls of tests\n                             this option has an alias: filter\n--exclude regexp           - a regexp to exclude the matching urls, takes precedence over `include`\n--previous-coverage-report - specifies the location of the previous coverage report, which will be\n                             combined with the current session. It must be generated in the "raw" format.\n                             Can be a file name or directory name, in the latter case\n                             file name is assumed to be "raw_coverage_data.json"\n--coverage-report-format   - specifies the format of the code coverage report, recognized\n                             values are `html`, `lcov` or `raw`.\n                             If provided, will enable the code coverage information collection.\n                             This option can be repeated several times, resulting in several reports\n                             saved in the same directory. Alternatively, several formats can be\n                             concatenated with "," or "+": --coverage-report-format=html+raw\n--coverage-report-dir      - specifies the output directory for the code coverage report\n                             default value is "./coverage/"\n--coverage-unit            - sets the "coverageUnit" harness config option,\n                             recognized values are: "file" and "extjs_class"\n--verbose                  - enable the output from all assertions (not only from failed ones)\n--debug                    - enable diagnostic messages\n--report-format            - create a report for each browser after the test suite execution\n                             recognizable formats are: "JSON, JUnit"\n--report-file-prefix       - required when `report-format` is provided. \n                             Specifies the initial part of file name to save the report to.\n                             The browser name will be used as the second part, extension will be preserved.\n                             For example, specifying: --report-file-prefix=report_.json will save the reports to: \n                             report_firefox.json, report_ie.json, etc\n--report-file              - Alias for `--report-file-prefix`\n--width                    - width of the viewport, in pixels\n--height                   - height of the viewport, in pixels\n--no-color                 - disable the coloring of the output\n--pause                    - pause between individual tests, in milliseconds, default value is 3000\n--page-pause               - pause between tests pages, in milliseconds, default value is 3000\n--host                     - host, running the RemoteWebDriver server. When provided, test suite will be launched\n                             on that host. Note, that harness url will be accessed from remote host.\n--port                     - port number on the host with RemoteWebDriver server, default value is 4444\n'),quit(6);
var harnessURL=args.argv[1],browser=options.browser||"*";"*"==browser&&(browser=["firefox","chrome","ie","safari"]);browser instanceof Array||(browser=[browser]);var reportFormat=options["report-format"],reportFilePrefix=options["report-file-prefix"]||options["report-file"];reportFormat&&("JSON"!=reportFormat&&"JUnit"!=reportFormat)&&(print("Unrecognized report format: "+reportFormat),quit(6));
reportFormat&&!reportFilePrefix&&(print("`report-file-prefix` option is required, when `report-format` option is specified"),quit(6));reportFilePrefix&&!reportFormat&&(reportFormat="JSON");var coverageOptions=processCoverageOptions(options),host=options.host,port=options.port||4444,isDebug=options.debug||!1,noColor=options["no-color"]||isWindows;setChromeDriverServerPath(binDir);setIEDriverServerPath(binDir);
for(var browserConfigs={firefox:{javaClass:"org.openqa.selenium.firefox.FirefoxDriver",capabilitiesMethod:"firefox"},ie:{javaClass:"org.openqa.selenium.ie.InternetExplorerDriver",capabilitiesMethod:"internetExplorer"},safari:{javaClass:"org.openqa.selenium.safari.SafariDriver",capabilitiesMethod:"safari"},chrome:{javaClass:"org.openqa.selenium.chrome.ChromeDriver",capabilitiesMethod:"chrome"}},getBrowserClass=function(a){a=a.split(".");for(var b=Packages,f=0;f<a.length;f++)if(b=b[a[f]],void 0===b)return null;
return b},getDriverInstance=function(a){var b=browserConfigs[a];if(!b)return print("Unknown browser: "+a),null;debug("Trying to create a WebDriver instance for browser: "+a);if(!host){var f=getBrowserClass(b.javaClass);if(!f)return print("Browser class is missing: "+b.javaClass),null}var d=null;try{if(host){var g=new java.net.URL(constructURL(host,{})+":"+port+"/wd/hub"),h=Packages.org.openqa.selenium.remote.DesiredCapabilities[b.capabilitiesMethod]();debug("Host option is provided, switching to RemoteWebDriver, on host: "+
g);d=new Packages.org.openqa.selenium.remote.RemoteWebDriver(g,h)}else d=new f}catch(c){print("WebDriver instatiation failed: "+a);print("Failed with: "+c);try{d.quit()}catch(k){}return null}if(d)debug("WebDriver instantiated successfully");else return print("[ERROR]: Driver instantiation failed w/o exceptions"),null;return d},browserCounter=0,reportOptions=reportFormat?{format:reportFormat,filePrefix:reportFilePrefix}:null,exitCodeSum=0,i=0;i<browser.length;i++){var browserName=browser[i];(currentDriver=
getDriverInstance(browserName))?(browserCounter++,runBrowser(getProceduralInterface(currentDriver,browserName,reportOptions),{sync:!0,harnessURL:harnessURL,query:{selenium:!0,verbose:options.verbose,include:options.include||options.filter,exclude:options.exclude,pause:options.pause,enableCodeCoverage:coverageOptions.enableCodeCoverage,coverageUnit:coverageOptions.coverageUnit,hasPreviousReport:Boolean(coverageOptions.previousCoverageReport)},pagePause:options["page-pause"],enableCodeCoverage:coverageOptions.enableCodeCoverage,
coverageReportDir:coverageOptions.coverageReportDir,coverageReportFormats:coverageOptions.coverageReportFormats,coverageUnit:coverageOptions.coverageUnit,previousCoverageReport:coverageOptions.previousCoverageReport,viewportWidth:options.width||1200,viewportHeight:options.height||800,reportOptions:reportOptions},function(a){exitCodeSum+=a})):debug("Ignoring browser, webdriver instatiation failed: "+browserName)}browserCounter||(print("No supported browsers available, exiting"),quit(3));
quit(1==browserCounter?exitCodeSum:0<exitCodeSum?7:0);
